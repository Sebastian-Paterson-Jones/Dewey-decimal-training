@{
    ViewBag.Title = "Dewey Decimal Classification system - replacing.";
}

<style>
    .replacing {
        height: 100%;
        padding-top: 25px;
    }

    .start-page {
        width: 100%;
        height:100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .start-page .card {
        max-width: 300px;
        height: 500px;
        border-radius: 15px;
        background-color: #282828;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 15px;
    }

    .start-page .card h3 {
        margin-bottom: 25px;
    }

    .start-page .card p {
        width: 100%;
        margin: 25px 0;
        text-align: center;
    }

    .start-page .card button {
        width: 100%;
        max-width: 150px;
        height: 50px;
        border-radius: 10px;
        margin: auto;
    }

    .game-page {
        position: relative;
        height: 100%;
    }

        .game-page .btn-back {
            width: 50px;
            height: 40px;
            background-color: #282828;
            border-radius: 10px;
            padding: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

            .game-page .btn-back:before {
                color: #d5d5d5;
            }

        .game-page .container {
            position: relative;
            display: flex;
            justify-content: center;
            padding-top: 25px;
        }

            .game-page .container .timer {
                width: max-content;
            }

        .game-page .container .timer span {
            color: #d5d5d5;
            font-size: 40px;
        }

            .game-page .timer.active {
                animation: bounce 1s infinite;
                -moz-animation: bounce 1s infinite;
                -webkit-animation: bounce 1s infinite;
            }



    /* timer animation keyframes*/
    @@keyframes bounce {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@-moz-keyframes bounce {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@-webkit-keyframes bounce {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
</style>

<section id="replacing" class="replacing">
   <!-- Loaded template --> 
</section>

<template id="start-page">
    <div class="start-page">
        <div class="card">
            <h3 class="heading">Welcome to the dewey decimal replacing training.</h3>
            <p class="sub-heading">In this training you will be timed to rearrage the elements in ascending order</p>
            <p class="sub-heading">When you are ready, select start</p>
            <button id="BtnStartGame" class="btn-primary">Start</button>
        </div>
    </div>
</template>

<template id="game-page">
    <div class="game-page">
        <i class="fa fa-arrow-left btn-back" onclick="showStartPage()"></i>
        <div class="container">
            <div id="timer" class="timer">
                <span id="minutes"></span>
                <span>:</span>
                <span id="seconds"></span>
                <span>:</span>
                <span id="miliseconds"></span>
            </div>
        </div>
    </div>
</template>

<template id="success-page">
    <div class="success-page">
        <h1>You did it !</h1>
    </div>
</template>

<script>

    // interval timer
    var timer;
    // miliseconds times
    var miliseconds = 0;


    window.onload = (event) => {
        const currTemplate = document.getElementById("start-page").content.cloneNode(true);
        currTemplate.getElementById("BtnStartGame").onclick = (event) => {
            showGamePage();
        };
        document.getElementById("replacing").appendChild(currTemplate);
    };

    const showStartPage = () => {
        stopTimer();
        timer = 0;
        const temp = document.getElementById("start-page");
        const clon = temp.content.cloneNode(true);
        const bod = document.getElementById("replacing");

        clon.getElementById("BtnStartGame").onclick = (event) => {
            showGamePage();
        };

        bod.innerHTML = "";
        bod.appendChild(clon);
    }

    const showGamePage = () => {
        const temp = document.getElementById("game-page");
        const clon = temp.content.cloneNode(true);
        const bod = document.getElementById("replacing");
        bod.innerHTML = "";
        bod.appendChild(clon);

        // start timer
        startTimer();
    }

    const showSuccessPage = () => {
        stopTimer();
        const temp = document.getElementById("success-page");
        const clon = temp.content.cloneNode(true);
        const bod = document.getElementById("replacing");
        bod.innerHTML = "";
        bod.appendChild(clon);
    }

    const startTimer = () => {

        // padding function
        const pad = (val) => {
            return val > 9 ? val : "0" + val;
        }

        const timeElem = document.getElementById("timer");
        const milis = document.getElementById("miliseconds");
        const seconds = document.getElementById("seconds");
        const minutes = document.getElementById("minutes");

        timeElem.classList.add("active");

        timer = setInterval(() => {
            miliseconds++;
            milis.innerHTML = pad(miliseconds % 100);
            seconds.innerHTML = pad(parseInt(miliseconds / 100, 10)%60);
            minutes.innerHTML = pad(parseInt(miliseconds / 6000, 10));
        }, 10);
    }

    const stopTimer = () => {
        const timeElem = document.getElementById("timer");
        timeElem.classList.remove("active");
        clearInterval(timer);
    }
</script>



